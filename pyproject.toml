# ======================================================================================
# Project metadata
# ======================================================================================

[project]
# Basic information
name = "gettsim"
dynamic = ["version"]
description = "The German Taxes and Transfers SIMulator"
readme = { file = "README.md", content-type = "text/markdown" }
license = { file = "LICENSE" }
# About the project
authors = [
    { name = "Hans-Martin von Gaudecker", email = "hmgaudecker@uni-bonn.de" },
    { name = "Marvin Immesberger" },
    { name = "Christian Zimpelmann" }
]
maintainers = [
    { name = "Hans-Martin von Gaudecker", email = "hmgaudecker@uni-bonn.de" },
    { name = "Marvin Immesberger" }
]
keywords = [
    "Economics",
    "Taxes",
    "Benefits",
    "Transfers",
    "Pensions",
    "Germany",
]
classifiers = [
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU Affero General Public License v3",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
]
# Dependencies and requirements
requires-python = ">=3.11"
dependencies = [
    "dags>=0.3.0",
    "ipywidgets",
    "networkx",
    "numpy",
    "numpy-groupies",
    "pandas",
    "openpyxl",
    "plotly",
    "optree",
    "pygments",
    "pygraphviz",
    "pytest",
    "pyyaml",
]


[project.urls]
Repository = "https://github.com/iza-institute-of-labor-economics/gettsim"
Changelog = "https://gettsim.readthedocs.io/en/stable/changes.html"
Documentation = "https://gettsim.readthedocs.io"
Github = "https://github.com/iza-institute-of-labor-economics/gettsim"
Tracker = "https://github.com/iza-institute-of-labor-economics/gettsim/issues"


# ======================================================================================
# Build system configuration
# ======================================================================================

[build-system]
requires = ["hatchling", "hatch_vcs"]
build-backend = "hatchling.build"

[tool.hatch.build.hooks.vcs]
version-file = "src/_gettsim/_version.py"

[tool.hatch.build.targets.sdist]
exclude = ["tests"]
only-packages = true

[tool.hatch.build.targets.wheel]
only-include = ["src"]
sources = ["src"]

[tool.hatch.version]
source = "vcs"

[tool.hatch.metadata]
allow-direct-references = true


# ======================================================================================
# Pixi
# ======================================================================================

[tool.pixi.project]
channels = ["conda-forge"]
platforms = ["linux-64", "osx-64", "osx-arm64", "win-64"]

# Development Dependencies (conda)
# --------------------------------------------------------------------------------------

[tool.pixi.dependencies]
python = ">=3.11,<3.13"
pre-commit = "*"
pandas = ">=2.1"
numpy_groupies = "*"
numpydoc = "*"
openpyxl = "*"
ipywidgets = "*"
jupyterlab = "*"
networkx = "*" # Remove once dags is a proper dependency
plotly = ">=5.24,<6"
pygments = "*"
pygraphviz = "*"
pyyaml = "*"
toml = "*"
pytest = "*"
pytest-cov = "*"
pytest-profiling = "*"
pytest-xdist = "*"
snakeviz = ">=2.2.2,<3"


# Development Dependencies (pypi)
# --------------------------------------------------------------------------------------

[tool.pixi.pypi-dependencies]
gettsim = {path = ".", editable = true}
pdbp = "*"

[tool.pixi.target.unix.pypi-dependencies]
kaleido = "*"

[tool.pixi.target.win-64.pypi-dependencies]
kaleido = ">=0.1.0.post1,<=0.1.0.post1"

# Features
# --------------------------------------------------------------------------------------

[tool.pixi.feature.py311.dependencies]
python = "3.11.*"

[tool.pixi.feature.py312.dependencies]
python = "3.12.*"

[tool.pixi.feature.jax.target.unix.dependencies]
jax = ">=0.4.20"
jaxlib = ">=0.4.20"

[tool.pixi.feature.jax.target.win-64.pypi-dependencies]
jax = { version = ">=0.4.20", extras = ["cpu"] }
jaxlib = ">=0.4.20"

[tool.pixi.feature.mypy.pypi-dependencies]
mypy = "==1.15.0"
types-PyYAML = "*"
types-pytz = "*"

# Tasks
# --------------------------------------------------------------------------------------

[tool.pixi.feature.test.tasks]
tests = "pytest"

[tool.pixi.feature.mypy.tasks]
mypy = "mypy --ignore-missing-imports"

# Environments
# --------------------------------------------------------------------------------------

[tool.pixi.environments]
mypy = ["mypy"]
py311 = ["test", "py311"]
py312 = ["test", "py312"]
py312-jax = ["py312", "test", "jax"]


# ======================================================================================
# Ruff configuration
# ======================================================================================

[tool.ruff]
target-version = "py311" # Replace by [project] requires-python = ">=3.11" above
fix = true
unsafe-fixes = false

[tool.ruff.lint]
select = ["ALL"]
extend-ignore = [
    "ICN001", # numpy should be np, but different convention here.
    # Docstrings
    "D103", # missing docstring in public function
    "D107",
    "D203",
    "D212",
    "D213",
    "D402",
    "D413",
    "D415",
    "D416",
    "D417",
    # Others.
    "D404", # Do not start module docstring with "This".
    "RET504", # unnecessary variable assignment before return.
    "S101", # raise errors for asserts.
    "B905", # strict parameter for zip that was implemented in py310.

    "FBT", # flake8-boolean-trap
    "EM", # flake8-errmsg
    "ANN401", # flake8-annotate typing.Any
    "PD", # pandas-vet
    "E731", # do not assign a lambda expression, use a def
    "RET", # unnecessary elif or else statements after return, raise, continue, ...
    "S324", # Probable use of insecure hash function.
    "COM812", # trailing comma missing, but black takes care of that
    "PT007", # wrong type in parametrize, gave false positives
    "DTZ001", # use of `datetime.datetime()` without `tzinfo` argument is not allowed
    "DTZ002", # use of `datetime.datetime.today()` is not allowed
    "PT012", # `pytest.raises()` block should contain a single simple statement
    "PLR5501", # elif not supported by Jax converter
    "TRY003", # Avoid specifying long messages outside the exception class
    "FIX002", # Line contains TODO -- Use stuff from TD area.
    "PLC2401", # Allow non-ASCII characters in variable names.
    "PLC2403", # Allow non-ASCII function names for imports.
    "PLR0913", # Allow too many arguments in function definitions.
    "N999", # Allow non-ASCII characters in file names.
    "PLR0913", # Too many arguments in function definition.

    # Things we are not sure we want
    # ==============================
    "SIM102", # Use single if statement instead of nested if statements
    "SIM108", # Use ternary operator instead of if-else block
    "SIM117", # do not use nested with statements
    "BLE001", # Do not catch blind exceptions (even after handling some specific ones)
    "PLR2004", # Magic values used in comparison
    "PT006", # Allows only lists of tuples in parametrize, even if single argument

    # Things ignored during transition phase
    # ======================================
    "D", # docstrings
    "ANN", # missing annotations
    "C901", # function too complex
    "PT011", # pytest raises without match statement
    "INP001", # implicit namespace packages without init.
    "E721", # Use `is` and `is not` for type comparisons

    # Things ignored to avoid conflicts with ruff-format
    # ==================================================
    "ISC001",
]
exclude = []

[tool.ruff.lint.per-file-ignores]
"src/ttsim/functions/all_functions_for_docs.py" = ["F401", "E501", "F403"]
"src/ttsim/typing.py" = ["PGH", "PLR", "SIM114"]
"src/ttsim/piecewise_functions.py" = ["PLR"]
"src/ttsim/plot_dag.py" = ["PLR"]
"src/_gettsim/*" = ["E501"]
"docs/**/*.ipynb" = ["T201"]

# Files which should be ignored until we have rewritten them
# =========================================================
"outdated_docs/**/*.ipynb" = ["T201"]
"tests/ttsim/test_docs.py" = ["F821"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"


# ======================================================================================
# mypy configuration
# ======================================================================================

[tool.mypy]
files = ["src", "tests"]
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
explicit_package_bases = true

[[tool.mypy.overrides]]
module = [
    "src.ttsim.plot_dag",
    "tests.ttsim.test_docs",
]
disallow_untyped_defs = false
ignore_errors = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
]
disable_error_code = [
    "no-untyped-def",  # All tests return None, don't clutter source code.
    "empty-body",  # Happens for all functions decorated with @policy_input
]

[[tool.mypy.overrides]]
module = [
    "src._gettsim_tests.*",
]
disable_error_code = [
    "no-untyped-def",  # All tests return None, don't clutter source code.
    "empty-body",  # Happens for all functions decorated with @policy_input
    "type-arg" # TODO: Remove once we have proper types for parameters.
]

[[tool.mypy.overrides]]
module = [
    "src._gettsim.*",
]
disable_error_code = [
    "empty-body",  # Happens for all functions decorated with @policy_input
    "type-arg" # TODO: Remove once we have proper types for parameters.
]


[[tool.mypy.overrides]]
module = [
    "src.ttsim.*",
    # "src._gettsim.*",
]
disable_error_code = [
    "empty-body",  # Happens for all functions decorated with @policy_input
]

[[tool.mypy.overrides]]
module = [
    "tests.ttsim.test_vectorization",
]
disable_error_code = [
    "assignment"
]

[tool.check-manifest]
ignore = ["src/_gettsim/_version.py"]


# ======================================================================================
# pytest configuration
# ======================================================================================

[tool.pytest.ini_options]
addopts = ["--pdbcls=pdbp:Pdb"]
filterwarnings = [
    "ignore:.*XMLParser*:DeprecationWarning",
    "ignore:.*'tree.iter()'*:PendingDeprecationWarning",
    "ignore:.*Sorting*:FutureWarning",
    "ignore:The TerminalReporter.writer attribute is",
    "ignore:Repeated execution of the test suite",
    "ignore:Using or importing the ABCs from 'collections'",
    "ignore::ttsim.compute_taxes_and_transfers.FunctionsAndColumnsOverlapWarning"
]
markers = [
    "wip: Tests that are work-in-progress.",
    "unit: Flag for unit tests which target mainly a single function.",
    "integration: Flag for integration tests which may comprise of multiple unit tests.",
    "end_to_end: Flag for tests that cover the whole program.",
]
norecursedirs = ["docs"]
testpaths = [
    "src/_gettsim_tests",
    "tests/ttsim",
]

# ======================================================================================
# yamlfix configuration
# ======================================================================================

[tool.yamlfix]
line_length = 88
sequence_style = "block_style"
none_representation = "null"
